/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Random;

public class Library {

    public static void main(String[] args) {

        System.out.println(binarySearch(new int[]{0, 1, 2, 3, 4}, 4));

    }

    // 0 , 1
//    public static int binarySearch(int[] array, int key) {
//
//        int splitter = array.length / 2 ;
//
//        if (array[splitter] == key) {
//            return splitter;
//        }
//        else if (array[splitter] > key) {
//
//            int[] newArr = new int[array.length / 2];
//            for (int i = 0; i < newArr.length; i++) {
//                newArr[i] = array[i];
//            }
//            return binarySearch(newArr, key);
//
//        }
//
//        else if (array[splitter] < key) {
//            int[] newArr = new int[array.length / 2];
//            for (int i = 0; i < newArr.length; i++) {
//                newArr[i] = array[++splitter];
//            }
//            return binarySearch(newArr, key);
//
//        }
//
//        return 1;
//
//    }


    public static int binarySearch(int[] array, int key) {

        int min = array[0];
        int max = array.length - 1;
        int i = -1;
        boolean validator = true;

        while (validator) {
            validator = false;

            int mid = (min + max) / 2;

            if (key == array[mid]) {
                i = mid;
            } else if (key < array[mid]) {
                max = mid - 1;
                validator = true;
            } else {
                min = mid + 1;
                validator = true;
            }
        }

        return i;

    }


    public int[] roll(int n) {
        int[] dice = {1, 2, 3, 4, 5, 6};

        int[] arr = new int[n];
        Random random = new Random();

        for (int i = 0; i < n; i++) {
            int randomIndex = random.nextInt(5);
            arr[i] = dice[randomIndex];
        }

        return arr;
    }

    public boolean containsDuplicates(int[] array) {
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array.length; j++) {
                if (i != j && array[i] == array[j]) {
                    return true;
                }
            }
        }
        return false;
    }

    public float averageCalculator(int[] array) {
        int sum = 0;
        for (int number : array) {
            sum = sum + number;
        }
        return (float) sum / array.length;
    }

    public int[] lowestAverage(int[][] array) {

        int sum = 0;
        float prevAvg;
        float avg = 0;
        int requiredIndex = 0;


        for (int i = 0; i < array.length; i++) {
            // reassigning the variables
            prevAvg = avg;
            sum = 0;

            // a loop to get the avg
            for (int j = 0; j < array[i].length; j++) {
                sum = sum + array[i][j];
            }
            avg = (float) sum / array[i].length;

            // if the new average less than the previous average , replace the index
            if (avg < prevAvg) {
                requiredIndex = i;
            }

        }

        return array[requiredIndex];


    }
}
